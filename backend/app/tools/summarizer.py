"""
Gemini-powered Lecture Summarizer
Uses Gemini 2.5 Flash for cost-effective, high-quality summarization

Black box interface:
- Input: Transcript text (string)
- Output: Markdown-formatted lecture notes (string) OR async stream
"""
import os
from typing import Optional, AsyncGenerator
from google import genai


class LectureSummarizer:
    """
    Summarizes lecture transcripts into structured notes using Gemini 2.5 Flash.

    Black box interface - implementation details hidden.
    Can be replaced with any other summarization approach without breaking the API.
    """

    def __init__(self):
        """
        Initialize the summarizer with Gemini 2.5 Flash.
        API key is loaded from GEMINI_API_KEY or GOOGLE_API_KEY environment variable.
        """
        # Explicitly get API key from environment
        # Try GEMINI_API_KEY first, fallback to GOOGLE_API_KEY
        api_key = os.getenv("GEMINI_API_KEY") or os.getenv("GOOGLE_API_KEY")

        if not api_key:
            raise ValueError("GEMINI_API_KEY or GOOGLE_API_KEY must be set in environment")

        # Create client with explicit API key
        self.client = genai.Client(api_key=api_key)
        self.model = "gemini-2.5-flash"

    def summarize(
        self,
        transcript: str,
        video_title: Optional[str] = None
    ) -> str:
        """
        Main interface: Summarize transcript into structured lecture notes.

        Args:
            transcript: Full transcript text
            video_title: Optional video title for context

        Returns:
            Markdown-formatted lecture notes

        Raises:
            Exception: If summarization fails
        """
        # Build the prompt
        prompt = self._build_prompt(transcript, video_title)

        # Generate summary using Gemini
        response = self.client.models.generate_content(
            model=self.model,
            contents=prompt
        )

        # Extract text from response
        return response.text

    async def summarize_stream(
        self,
        transcript: str,
        video_title: Optional[str] = None
    ) -> AsyncGenerator[str, None]:
        """
        Async streaming interface: Stream lecture notes chunks as they're generated.

        Args:
            transcript: Full transcript text
            video_title: Optional video title for context

        Yields:
            Text chunks as they are generated by Gemini

        Raises:
            Exception: If summarization fails

        Example:
            async for chunk in summarizer.summarize_stream(transcript):
                print(chunk, end='', flush=True)
        """
        # Build the prompt
        prompt = self._build_prompt(transcript, video_title)

        # Stream summary using Gemini async streaming API
        # Note: Need to await the stream before iterating
        async for chunk in await self.client.aio.models.generate_content_stream(
            model=self.model,
            contents=prompt
        ):
            if chunk.text:
                yield chunk.text

    # =========================================================================
    # PRIVATE METHODS - Implementation details hidden from interface
    # =========================================================================

    def _build_prompt(
        self,
        transcript: str,
        video_title: Optional[str] = None
    ) -> str:
        """
        Build optimized prompt for Gemini 2.5 Flash.
        Based on 2025 best practices for summarization.
        """
        title_context = f"Video Title: {video_title}\n\n" if video_title else ""

        # Principle-based prompt with clear priority hierarchy
        # Inspired by ChatGPT's natural, mentor-like style
        prompt = f"""SYSTEM

You are a helpful, expert assistant. Write like a senior mentor: clear, structured, concise, and human â€” never robotic.
Follow these global rules in order of priority:

1) Usefulness & clarity over verbosity. Prefer short paragraphs and scannable bullets.
2) Markdown formatting when it improves readability. Use headings only when helpful.
3) Bold key terms sparingly. No filler, no fake enthusiasm, no marketing language.
4) If input is messy, reorganize it cleanly. Add brief rationale if it aids understanding.
5) Be concrete: examples, edge cases, caveats. Avoid unverified facts.

Style constraints:
- Never start a line with an emoji. If emojis are used, place them at the END of top-level headers only, max 3 total.
- Keep sections tight; avoid redundancy; compress without losing meaning.
- Use horizontal rules `---` to separate major sections when it improves clarity.

Self-check before answering:
- Is the response directly useful?
- Formatting clean and skimmable?
- No invented metrics/claims?
- Followed emoji/heading rules?

---

TASK

{title_context}Create lecture notes from this video transcript.

Goal: Distill key ideas into ~250-350 words. Typical structure (adapt as needed):
- Brief summary (what's the main point?) â€” suggest: "## Executive Summary âœ…"
- Key concepts with clear explanations â€” suggest: "## Key Concepts ðŸ’¡"
- Practical takeaways or next steps â€” suggest: "## Quick Takeaways ðŸ”‘"

Transcript:
{transcript}

Output:"""

        return prompt
